Salted hashing
While md5 is an easy to implement hashing method, it is not secure enough for even the most basic projects. You can, however, make your data more secure by making the hashing method more random. By random, we mean more unpredictable. As we said before, md5 hashing is the same no matter what computer runs the code. So to make our hashing more powerful, we will add a salt to our hashed string. A salt is a random unique key used to generate a unique password. Example:

salt = '123' #where the value 123 changes randomly
hashed_password = md5(password + salt)
A salt is a string of random characters that will be passed to a hashing method (an md5()) along with the string we are trying to hash (the submitted password) via concatenation. The hashing method that uses the salt is designed in such a way that it takes the salt to compute the hashed string, using the salt as an 'ingredient' in the hashing 'recipe'.

Generating a salt
To generate a salt, you just need to generate a random string of characters. The code below actually uses two different functions to create a random string:

 >   import os, binascii # include this at the top of your file
 >   salt = binascii.b2a_hex(os.urandom(15))
The function called os.urandom() returns a string of bytes. The number of bytes is equal to the parameter provided. This string isn't a normal alphanumeric string, so we turn it into a string using the function b2a_hex(), which will turn the value into a normal alphanumeric string. This new random string will be our salt. The idea is to store this salt during the registration process. Example:

    =====================================
    username = request.form['username']
    email = request.form['email']
    password = request.form['password']
    salt =  binascii.b2a_hex(os.urandom(15))
    hashed_pw = md5.new(password + salt).hexdigest()
    insert_query = "INSERT INTO users (username, email, password, salt, created_at, updated_at)
        VALUES (:username, :email, :hashed_pw, :salt, NOW(), NOW())"
    query_data = { 'username': username, 'email': email, 'hashed_pw': hashed_pw, 'salt': salt}
    mysql.query_db(insert_query, query_data)
    ======================================
Now, when we are trying to authenticate a user's login, we do some pretty nifty stuff:
    ======================================
    email = request.form['email']
    password = request.form['password']
    user_query = "SELECT * FROM users WHERE users.email = :email LIMIT 1"
    query_data = {'email': email}
    user = mysql.query_db(user_query, query_data)
    if len(user) != 0:
    encrypted_password = md5.new(password + user[0]['salt']).hexdigest()
    if user[0]['password'] == encrypted_password:
    # this means we have a successful login!
    else:
        # invalid password!
    else:
    # invalid email!
    ======================================
Below are hashed passwords generated by concatenating a password ('password' as value) with the salt ( str_shuffle('hello') which we know is very insecure) within the md5 hashing method. Even though we provided very simple values for both password and salt, we still get 5 random hashed values for password in the database:



By adding a salt we have made our passwords slightly more secure. This is to get you started with the idea of password hashing and salt. We'll talk about more secure password storage a little later in the Django section.